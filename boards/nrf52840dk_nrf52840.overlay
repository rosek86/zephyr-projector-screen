/*
 * Copyright (c) 2021-2022 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 */

/ {
	chosen {
		nordic,pm-ext-flash = &mx25r64;
	};

	/*
	* In some default configurations within the nRF Connect SDK,
	* e.g. on nRF52840, the chosen zephyr,entropy node is &cryptocell.
	* This devicetree overlay ensures that default is overridden wherever it
	* is set, as this application uses the RNG node for entropy exclusively.
	*/

	chosen {
		zephyr,entropy = &rng;
	};

	/*
	* By default, PWM module is only configured for led0 (LED1 on the board).
	* The light bulb app, however, uses LED2 to show the state of the lighting,
	* including its brightness level.
	*/
	aliases {
		pwm-led1 = &pwm_led1;
		pwm-ir = &pwm_ir;
	};

	pwmleds {
		pwm_led1: pwm_led_1 {
			pwms = <&pwm0 1 PWM_MSEC(20) PWM_POLARITY_INVERTED>;
		};
	};

	pwm-ir {
    compatible = "pwm-leds";
    pwm_ir: pwm_ir_0 {
      pwms = <&pwm1 0 PWM_MSEC(20) PWM_POLARITY_NORMAL>;
    };
  };

  zephyr,user {
    screen-down-gpios = <&gpio1 6 GPIO_ACTIVE_LOW>;
    screen-up-gpios   = <&gpio1 7 GPIO_ACTIVE_LOW>;
  };
};

&pwm0 {
	pinctrl-0 = <&pwm0_default_alt>;
	pinctrl-1 = <&pwm0_sleep_alt>;
	pinctrl-names = "default", "sleep";
};

&pwm1 {
  status = "okay";
  pinctrl-0 = <&pwm1_default>;
  pinctrl-1 = <&pwm1_sleep>;
  pinctrl-names = "default", "sleep";
};

&pinctrl {
	pwm0_default_alt: pwm0_default_alt {
		group1 {
			psels = <NRF_PSEL(PWM_OUT1, 0, 14)>;
			nordic,invert;
		};
	};

	pwm0_sleep_alt: pwm0_sleep_alt {
		group1 {
			psels = <NRF_PSEL(PWM_OUT1, 0, 14)>;
			low-power-enable;
		};
	};

	pwm1_default: pwm1_default {
    group1 {
      psels = <NRF_PSEL(PWM_OUT0, 1, 4)>;
    };
  };

  pwm1_sleep: pwm1_sleep {
    group1 {
      psels = <NRF_PSEL(PWM_OUT0, 1, 4)>;
      low-power-enable;
    };
  };

  qspi_default: qspi_default {
    group1 {
      psels = <NRF_PSEL(QSPI_SCK, 0, 9)>,
        <NRF_PSEL(QSPI_IO0, 0, 10)>,
        <NRF_PSEL(QSPI_IO1, 1, 13)>,
        <NRF_PSEL(QSPI_IO2, 1, 10)>,
        <NRF_PSEL(QSPI_IO3, 1, 0)>,
        <NRF_PSEL(QSPI_CSN, 1, 15)>;
    };
  };

  qspi_sleep: qspi_sleep {
    group1 {
      psels = <NRF_PSEL(QSPI_SCK, 0, 9)>,
        <NRF_PSEL(QSPI_IO0, 0, 10)>,
        <NRF_PSEL(QSPI_IO1, 1, 13)>,
        <NRF_PSEL(QSPI_IO2, 1, 10)>,
        <NRF_PSEL(QSPI_IO3, 1, 0)>;
      low-power-enable;
    };
    group2 {
      psels = <NRF_PSEL(QSPI_CSN, 1, 15)>;
      low-power-enable;
      bias-pull-up;
    };
  };
};

&qspi {
  status = "okay";
  pinctrl-0 = <&qspi_default>;
  pinctrl-1 = <&qspi_sleep>;
  pinctrl-names = "default", "sleep";
  mx25r64: mx25r6435f@0 {
    compatible = "nordic,qspi-nor";
    reg = <0>;
    /* MX25R64 supports only pp and pp4io */
    writeoc = "pp4io";
    /* MX25R64 supports all readoc options */
    readoc = "read4io";
    sck-frequency = <2000000>;
    jedec-id = [c2 28 17];
    sfdp-bfp = [
      e5 20 f1 ff  ff ff ff 03  44 eb 08 6b  08 3b 04 bb
      ee ff ff ff  ff ff 00 ff  ff ff 00 ff  0c 20 0f 52
      10 d8 00 ff  23 72 f5 00  82 ed 04 cc  44 83 68 44
      30 b0 30 b0  f7 c4 d5 5c  00 be 29 ff  f0 d0 ff ff
    ];
    size = <67108864>;
    has-dpd;
    t-enter-dpd = <10000>;
    t-exit-dpd = <35000>;
  };
};


/* Disable unused peripherals to reduce power consumption */
&adc {
	status = "disabled";
};
&uart1 {
	status = "disabled";
};
&i2c0 {
	status = "disabled";
};
&spi1 {
	status = "disabled";
};
&spi3 {
	status = "disabled";
};
&usbd {
	status = "disabled";
};
